
// ECS class:

// std::vector of std::vector<ComponentType> -- one for each component type
// bitset that links entity IDs to which components they have (no data, just for checking hasComponent)

// the index of the ComponentVector is the entity ID (will be sparse potentially)

// to add component<T>:
// - check if there is already a list of component type
// - if yes, index into it at entity ID and create new component there
// - else create the list and append it to the master list, then do above

// to get all entities with components C1, C2, ...:
// - get ComponentVector for C1
// - loop through vector and add entities to a temporary list of entity IDs if component isnt null
// - repeat for all other components C2, C3, ... but index with the list of entity IDs (we can skip indices that we know dont contain previous components)

// return list of entity IDs.

// to make a system:
// - auto entities = ECS::GetEntitiesWithComponents<TransformComponent, RenderComponent>();
// - for (e:entities)
// {
//     auto transform = ECS::GetComponent<TransformComponent>(e);  // this function is safe because we can check quickly against the bitset to confirm that the component exists before indexing into the ComponentVector<TransformComponent>
//     auto render = ECS::GetComponent<RenderComponent>(e);

//     Render(transform, render.settings);
// }